#imports:
import matplotlib as mpl
import matplotlib.pyplot as plt
import pandas as pd

from matplotlib import gridspec
from ShaniBA.CardioProject.Figures.GeneralFigureFunctions import remove_spines, edit_species_names
from ShaniBA.PredictionPipeline.PredictionFunctions import plot_roc_curve, plot_PR_curve



#directories:
GENIE_BASE_DIR = '/net/mraid08/export/genie/Lab/Personal/ShaniBAF/'
DATA_DIR = '/net/mraid08/export/jafar/Microbiome/Analyses/TCR/'
FIGURE_DIR = GENIE_BASE_DIR + 'Presentations and Manuscripts/CardioTCR paper/\
June2019/fig2_isCardio_classification/'
FIGURE_FILES_DIR = FIGURE_DIR + 'files_for_figure/'


class Figure2:

    def __init__(self,datasets_to_use=['pred. age gender', 'TCR features inc. pred. age gender', 'shuffled'],
                 size_factor=1, cmap='Reds'):
        self._dataset_dict = {
        'pred. age gender': FIGURE_FILES_DIR + 'XGB_randomSearch_25_byPredictedAgeGender/',
        'TCR features inc. pred. age gender': FIGURE_FILES_DIR + 'XGB_randomSearch_25_byRepFeatPCA10percVDJ0999PredictedAgeGender/',
        'shuffled' : FIGURE_FILES_DIR + 'XGB_randomSearch_25_byOldXShuffleWithPredictedAgeGender/',
        'TCR features by mb' : FIGURE_FILES_DIR +'TCRfeatures_XGB_byMbSega10M005095binary_SWAB_optByExpVar/'
                    }
        self._datasets_to_use = datasets_to_use #numbers refer to items index in self._sataset_dict.keys()
        self._size_factor = size_factor
        self._cmap = cmap
        self._plot_color_list = self._get_color_list


    @property
    def _get_color_list(self):
        cmap = plt.get_cmap(self._cmap, len(self._datasets_to_use)+1)  # get seperate colors for graphs
        color_list = [cmap(x + 1) for x in range(len(self._datasets_to_use))]
        return color_list



    def _get_data(self):
        """
        this function extracts all dataframe required for the plot and declare them as global variables
        all the files for these dataframes were copied to a designated directory (FIGURE_FILES_DIR) so they
        need to be manually updated if updated in their original location
        """
        data_dict = {}

        for dataset_name, data_dir in self._dataset_dict.items():
            print ('now extracting data for dataset %s' %dataset_name)
            data_dict[dataset_name] = {}
            data_dict[dataset_name]['result_df'] = pd.read_pickle(data_dir + 'results_df.pkl')
            data_dict[dataset_name]['prediction_df'] = pd.read_pickle(data_dir + 'predictions_df.pkl')
            data_dict[dataset_name]['shap_df'] = pd.read_pickle(data_dir + 'shap_values.pkl')
        data_dict['isCardio'] = pd.read_pickle(FIGURE_FILES_DIR + 'isCardio.dat')

        self._data_dict = data_dict



    def _set_fig2_definitions(self):
        """
        this function sets matplotlib parameters to be constant across the whole figure.
        :param size_factor: a factor to multiply all parameters in order to efficiently increase/decrese the figures
        while keeping the correct size relations.
        :return:
        """
        self._figsize=(4.75*self._size_factor, 4.75*self._size_factor)

        #TODO: arrange this funciton

        changing_size_params = {
        'axes.labelsize': 6,
        'font.size': 7,
        'legend.fontsize': 5,
        'axes.titlesize':8,
        'xtick.labelsize': 6,
        'ytick.labelsize': 6,
        'xtick.major.size': 1.75,
        'ytick.major.size': 1.75,
        'axes.linewidth': 0.5,
        'lines.linewidth': 0.5,
        'lines.markersize': 4
        }

        other_params = {
        'axes.titleweight': 'bold',
        'text.usetex': False,
        'xtick.direction': 'out',
        'xtick.major.pad': 1,
        'ytick.major.pad': 1,
        'axes.edgecolor': 'black',
        'axes.facecolor':'white',
        'figure.dpi': 300,
        'axes.labelpad': 0.8,
        'legend.labelspacing': 0.4,
        'legend.edgecolor': '0',
        'legend.frameon': False,
            'axes.xmargin': 0.1,
            'axes.ymargin': 0.1,
        }

        if self._size_factor != 1:
            for k,v in changing_size_params.items():
                changing_size_params[k] = v*self._size_factor


        mpl.rcParams.update(changing_size_params)
        mpl.rcParams.update(other_params)

        return


    def _plot_roc_curves(self, ax):

        for n,dataset in enumerate(self._datasets_to_use):

            y_pred = self._data_dict[dataset]['prediction_df']
            result_df = self._data_dict[dataset]['result_df']
            y_true = self._data_dict['isCardio']

            ax, roc_auc=plot_roc_curve(ax,y_true,y_pred,pos_label=1,dataset_name=dataset,color=self._plot_color_list[n])

        handles, labels = ax.get_legend_handles_labels()
        labels = [l.replace(' (area = ', '. auROC=') for l in labels]
        labels = [l.replace(')', '') for l in labels]
        ax.legend(handles, labels, loc='lower right')

        return ax


    def _plot_pr_curves(self):
        pass

    def _plot_deciles(self):
        pass

    def _plot_shap(self):
        pass

    def _plot_shap_values_heatmap(self):
        pass


    def _generate_fig_outline(self):
        self.fig = plt.figure(figsize=self._figsize)

        ##add sub-figure letters and remove spines:
        self._gs1 = gridspec.GridSpec(1, 1)
        self._gs1.update(top=0.95, bottom=0.7, left=0.04, right=0.34)
        self._ax1 = self.fig.add_subplot(self._gs1[0, 0])

        self._gs2 = gridspec.GridSpec(1, 1)
        self._gs2.update(top=0.95, bottom=0.7, left=0.36, right=0.66)
        self._ax2 = self.fig.add_subplot(self._gs2[0, 0])

        self._gs3 = gridspec.GridSpec(1, 1)
        self._gs3.update(top=0.95, bottom=0.7, left=0.68, right=0.98)
        self._ax3 = self.fig.add_subplot(self._gs3[0, 0])

        self._gs5 = gridspec.GridSpec(1, 1)
        self._gs5.update(top=0.67, bottom=0.12, left=0.36, right=0.66)
        self._ax5 = self.fig.add_subplot(self._gs5[0, 0])

        self._gs6 = gridspec.GridSpec(1, 1)
        self._gs6.update(top=0.67, bottom=0.12, left=0.68, right=0.98)
        self._ax6 = self.fig.add_subplot(self._gs6[0, 0])

        self._gs8 = gridspec.GridSpec(1, 1)
        self._gs8.update(top=0.12, bottom=0.07, left=0.36, right=0.66)
        self._ax8 = self.fig.add_subplot(self._gs8[0, 0])


    def plot_fig_2(self):
        self._get_data()
        self._set_fig2_definitions()
        self._generate_fig_outline()
        self._ax1 = self._plot_roc_curves(self._ax1)






if __name__ == "__main__":
    fig2_obj = Figure2(size_factor=1.3)
    fig2_obj.plot_fig_2()
    fig2_obj.fig.savefig(FIGURE_DIR + 'figure2_new.png')


